const { Builder, By, until } = require('selenium-webdriver');
const chrome = require('selenium-webdriver/chrome');
const assert = require('assert');
const path = require('path');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
const options = new chrome.Options()
    .addArguments('--start-maximized')
    .addArguments('--disable-infobars')
    .addArguments('--disable-notifications');

// –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
const testImagePath = 'C:\\YULYA\\TESTING\\selenium\\selenium\\IMG_20250506_152543.jpg';

async function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

async function safeClick(driver, locator, description, timeout = 10000) {
    try {
        const element = await driver.wait(until.elementLocated(locator), timeout);
        await driver.wait(until.elementIsVisible(element), timeout);
        await driver.executeScript("arguments[0].scrollIntoView({block: 'center', behavior: 'smooth'});", element);
        await delay(800); // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        await driver.wait(until.elementIsEnabled(element), timeout);
        await element.click();
        console.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç "${description}" —É—Å–ø–µ—à–Ω–æ –Ω–∞–∂–∞—Ç`);
        return true;
    } catch (error) {
        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç "${description}":`, error.message);
        throw error;
    }
}

async function safeSendKeys(driver, locator, value, description, timeout = 10000) {
    try {
        const element = await driver.wait(until.elementLocated(locator), timeout);
        await element.clear();
        await element.sendKeys(value);
        console.log(`‚úÖ –ü–æ–ª–µ "${description}" –∑–∞–ø–æ–ª–Ω–µ–Ω–æ: ${value}`);
        return true;
    } catch (error) {
        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–µ "${description}":`, error.message);
        throw error;
    }
}

async function selectReactDropdown(driver, dropdownId, optionText, description) {
    try {
        console.log(`‚åõ –í—ã–±–∏—Ä–∞–µ–º ${description}: ${optionText}`);

        // 1. –ù–∞—Ö–æ–¥–∏–º –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º dropdown
        const dropdown = await driver.wait(
            until.elementLocated(By.xpath(`//div[@id='${dropdownId}']//div[contains(@class, 'indicatorContainer')]`)),
            15000
        );
        await driver.executeScript("arguments[0].scrollIntoView({block: 'center', behavior: 'smooth'});", dropdown);
        await delay(1000);
        await driver.executeScript("arguments[0].click();", dropdown);
        await delay(1500);

        // 2. –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        const input = await driver.findElement(By.css(`#${dropdownId} input`));
        await input.sendKeys(optionText);
        await delay(1000);

        // 3. –ò—â–µ–º –∏ –≤—ã–±–∏—Ä–∞–µ–º –æ–ø—Ü–∏—é
        const optionLocator = By.xpath(`//div[contains(@class, 'menu')]//div[contains(text(), '${optionText}')]`);
        const option = await driver.wait(until.elementLocated(optionLocator), 10000);
        await driver.executeScript("arguments[0].scrollIntoView({block: 'center', behavior: 'smooth'});", option);
        await delay(800);
        await option.click();

        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–æ: ${optionText}`);
        return true;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ ${description}:`, error.message);

        // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
        try {
            console.log('‚åõ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –≤—ã–±–æ—Ä–∞...');
            await driver.executeScript(`
                const select = document.querySelector('#${dropdownId}');
                const input = select.querySelector('input');
                input.value = '${optionText}';
                const event = new Event('input', { bubbles: true });
                input.dispatchEvent(event);
            `);
            await delay(1500);

            const option = await driver.wait(
                until.elementLocated(By.xpath(`//div[contains(@class, 'menu')]//div[contains(text(), '${optionText}')]`)),
                8000
            );
            await option.click();
            console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–æ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥): ${optionText}`);
            return true;
        } catch (fallbackError) {
            console.error('‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', fallbackError.message);
            throw error;
        }
    }
}

async function fillForm(driver, formData) {
    console.log('\n=== –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –§–û–†–ú–´ ===');

    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    await safeSendKeys(driver, By.id('firstName'), formData.firstName, '–ò–º—è');
    await safeSendKeys(driver, By.id('lastName'), formData.lastName, '–§–∞–º–∏–ª–∏—è');
    await safeSendKeys(driver, By.id('userEmail'), formData.email, 'Email');

    // –ü–æ–ª
    await safeClick(driver, By.xpath(`//label[contains(text(), '${formData.gender}')]`), `–ü–æ–ª: ${formData.gender}`);

    // –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await safeSendKeys(driver, By.id('userNumber'), formData.phone, '–¢–µ–ª–µ—Ñ–æ–Ω');

    // –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
    await safeClick(driver, By.id('dateOfBirthInput'), '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è');
    await delay(1000);

    // –ú–µ—Å—è—Ü
    const monthSelect = await driver.findElement(By.css('.react-datepicker__month-select'));
    await monthSelect.sendKeys(formData.dob.month);

    // –ì–æ–¥
    const yearSelect = await driver.findElement(By.css('.react-datepicker__year-select'));
    await yearSelect.sendKeys(formData.dob.year);
    await delay(500);

    // –î–µ–Ω—å
    const dayElement = await driver.findElement(
        By.css(`.react-datepicker__day--0${formData.dob.day}:not(.react-datepicker__day--outside-month)`)
    );
    await dayElement.click();

    // –•–æ–±–±–∏
    for (const hobby of formData.hobbies) {
        await safeClick(driver, By.xpath(`//label[contains(text(), '${hobby}')]`), `–•–æ–±–±–∏: ${hobby}`);
    }

    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const fileInput = await driver.findElement(By.id('uploadPicture'));
    await fileInput.sendKeys(formData.filePath);
    console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${path.basename(formData.filePath)}`);

    // –ê–¥—Ä–µ—Å
    await safeSendKeys(driver, By.id('currentAddress'), formData.address, '–ê–¥—Ä–µ—Å');

    // –®—Ç–∞—Ç –∏ –≥–æ—Ä–æ–¥
    await selectReactDropdown(driver, 'state', formData.state, '–®—Ç–∞—Ç');
    await delay(1000);
    await selectReactDropdown(driver, 'city', formData.city, '–ì–æ—Ä–æ–¥');
    await delay(1000);
}

async function submitAndVerifyForm(driver) {
    console.log('\n=== –û–¢–ü–†–ê–í–ö–ê –§–û–†–ú–´ ===');

    // –°–∫—Ä–æ–ª–ª –∏ –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ Submit
    const submitBtn = await driver.wait(until.elementLocated(By.id('submit')), 15000);
    await driver.executeScript("arguments[0].scrollIntoView({block: 'center', behavior: 'smooth'});", submitBtn);
    await delay(1000);
    await submitBtn.click();
    await delay(3000);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    try {
        await driver.wait(until.elementLocated(By.id('example-modal-sizes-title-lg')), 10000);
        const modalTitle = await driver.findElement(By.id('example-modal-sizes-title-lg')).getText();
        assert.strictEqual(modalTitle, 'Thanks for submitting the form');
        console.log('‚úÖ –§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        await safeClick(driver, By.id('closeLargeModal'), '–ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞');
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã:', error.message);
        throw error;
    }
}

async function positiveTest(driver) {
    console.log('\n=== –ü–û–ó–ò–¢–ò–í–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô ===');

    await driver.get('https://demoqa.com/automation-practice-form');
    await delay(3000); // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

    const formData = {
        firstName: '–Æ–ª—è',
        lastName: '–ò–≤–∞–Ω–æ–≤–∞',
        email: 'example@example.com',
        gender: 'Male',
        phone: '375295682123',
        dob: { day: '15', month: 'May', year: '1990' },
        hobbies: ['Sports', 'Reading'],
        filePath: testImagePath,
        address: 'Vitebsk',
        state: 'NCR',
        city: 'Delhi'
    };

    await fillForm(driver, formData);
    await submitAndVerifyForm(driver);
}

async function main() {
    let driver = await new Builder()
        .forBrowser('chrome')
        .setChromeOptions(options)
        .build();

    try {
        await positiveTest(driver);
        console.log('\n=== –í–°–ï –¢–ï–°–¢–´ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–´ ===');
    } catch (error) {
        console.error('\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï:', error.message);

        // –°–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try {
            const image = await driver.takeScreenshot();
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const screenshotPath = `error-${timestamp}.png`;
            require('fs').writeFileSync(screenshotPath, image, 'base64');
            console.log(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: ${screenshotPath}`);
        } catch (e) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç:', e);
        }
    } finally {
        await driver.quit();
    }
}

main();

// const { Builder, By, Key, until } = require('selenium-webdriver');
// const chrome = require('selenium-webdriver/chrome');

// // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
// const options = new chrome.Options()
//     .addArguments('--start-maximized')
//     .addArguments('--disable-infobars');

// (async function example() {
//     let driver = await new Builder().forBrowser('chrome').setChromeOptions(options).build();
//     try {
//         await driver.get('https://demoqa.com/automation-practice-form');

//         // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
//         await driver.wait(until.elementLocated(By.id('firstName')), 10000).sendKeys('–Æ–ª—è');
//         console.log("–ü—ã—Ç–∞–µ–º—Å—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º: firstName");
//         await driver.wait(until.elementLocated(By.id('lastName')), 10000).sendKeys('–ò–≤–∞–Ω–æ–≤–∞');
//         console.log("–ü—ã—Ç–∞–µ–º—Å—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º: lastName");
//         await driver.wait(until.elementLocated(By.id('userEmail')), 10000).sendKeys('example@example.com');
//         console.log("–ü—ã—Ç–∞–µ–º—Å—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º: email");

//         // –ö–ª–∏–∫ –ø–æ —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–∫–µ –ø–æ–ª–∞
//         await driver.wait(until.elementLocated(By.xpath("//label[contains(text(), 'Male')]")), 10000).click();
//         console.log("–ü—ã—Ç–∞–µ–º—Å—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º: gender");

//         await driver.wait(until.elementLocated(By.id('userNumber')), 10000).sendKeys('375295682123');
//         console.log("–ü—ã—Ç–∞–µ–º—Å—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º: number");

//         // –í—ã–±–æ—Ä –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
//         await driver.wait(until.elementLocated(By.id('dateOfBirthInput')), 10000).click();
//         console.log("–ü—ã—Ç–∞–µ–º—Å—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º: calendar");
//         await driver.wait(until.elementLocated(By.xpath('//*[@id="dateOfBirth"]/div[2]/div[2]/div/div/div[2]/div[1]/div[2]/div[2]/select')), 10000).click();
//         console.log("–ü—ã—Ç–∞–µ–º—Å—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º: year");
//         await driver.findElement(By.xpath('//*[@id="dateOfBirth"]/div[2]/div[2]/div/div/div[2]/div[1]/div[2]/div[2]/select/option[99]')).click();
//         console.log("–ü—ã—Ç–∞–µ–º—Å—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º: month");
//         await driver.findElement(By.xpath('//*[@id="dateOfBirth"]/div[2]/div[2]/div/div/div[2]/div[1]/div[2]/div[1]/select')).click();
//         console.log("–ü—ã—Ç–∞–µ–º—Å—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º: day");
//         await driver.findElement(By.xpath('//*[@id="dateOfBirth"]/div[2]/div[2]/div/div/div[2]/div[1]/div[2]/div[1]/select/option[2]')).click();
//         console.log("–ü—ã—Ç–∞–µ–º—Å—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º: day2");


//         await driver.findElement(By.xpath('//*[@id="hobbiesWrapper"]/div[2]/div[3]')).click();
//         console.log("–ü—ã—Ç–∞–µ–º—Å—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º: hobby");

//         // –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
//         const fileInput = await driver.wait(until.elementLocated(By.id('uploadPicture')), 10000);
//         const filePath = 'C:\\YULYA\\TESTING\\selenium\\selenium\\IMG_20250506_152543.jpg';
//         await fileInput.sendKeys(filePath);
//         console.log("–ü—ã—Ç–∞–µ–º—Å—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º: img");

//         await driver.findElement(By.id('currentAddress')).sendKeys('Vitebsk');
//         console.log("–ü—ã—Ç–∞–µ–º—Å—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º: adress");

//         // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã —Å –ø–æ–º–æ—â—å—é JavaScript
//         const element = await driver.wait(until.elementLocated(By.id('submit')), 10000);
//         await driver.executeScript("arguments[0].scrollIntoView();", element);
//         await element.click();
//         console.log("–ü—ã—Ç–∞–µ–º—Å—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º: submit");

//         const element2 = await driver.wait(until.elementLocated(By.id('closeLargeModal')), 10000);
//         await driver.executeScript("arguments[0].scrollIntoView();", element2);
//         await element2.click();
//         console.log("–£–°–ü–ï–•");

//     } finally {
//         // –ó–∞–∫—Ä—ã—Ç–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞
//         await driver.quit();
//     }
// })();